buildscript {
    ext.kotlin_version = '1.3.70'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.3.2"
    id "org.jetbrains.kotlin.jvm" version "1.3.70"
    id "idea"
}

def ROBOT_MAIN_CLASS = "frc.robot.RobotKt"

sourceSets {
    main.kotlin.srcDirs += 'src/generated/kotlin'
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = 5940 // frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://dl.bintray.com/kyonifer/maven" }
    maven { url "https://jitpack.io" }
    maven { url "http://dev.imjac.in/maven" }
    mavenLocal()
}

// Defining my dependencies. In this case, WPILib (+ friends)
apply plugin: 'java'
apply plugin: 'kotlin'
dependencies {

    compile wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2"

    // We need to add the Kotlin stdlib in order to use most Kotlin language features.
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    compile "com.github.mcm001:FalconLibrary:44847aa1e9"

    compile "com.fazecast:jSerialComm:2.5.2" // jserialcomm for jevois
    compile "com.github.salomonbrys.kotson:kotson:2.5.0" // gson
    compile "org.ejml:ejml-simple:0.38"

//    XChart for Simulations and Tests
    testCompile "org.knowm.xchart:xchart:3.6.0"
    testCompile "junit:junit:4.12"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper {
    gradleVersion = '5.0'
}

//task generateGains(type:Exec) {
//    workingDir './'
//    executable = 'python3.7'
////    executable = '/usr/bin/env'
//    args = ['./src/main/python/GenerateSources.py']
//}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xjvm-default=compatibility"
    }
}
//compileKotlin.dependsOn generateGains
